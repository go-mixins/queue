// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mock

import (
	"github.com/go-mixins/queue"
	"sync"
)

var (
	lockPublisherMockPublish sync.RWMutex
)

// PublisherMock is a mock implementation of Publisher.
//
//     func TestSomethingThatUsesPublisher(t *testing.T) {
//
//         // make and configure a mocked Publisher
//         mockedPublisher := &PublisherMock{
//             PublishFunc: func(topic string, obj interface{}, options ...queue.Option) error {
// 	               panic("TODO: mock out the Publish method")
//             },
//         }
//
//         // TODO: use mockedPublisher in code that requires Publisher
//         //       and then make assertions.
//
//     }
type PublisherMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(topic string, obj interface{}, options ...queue.Option) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Topic is the topic argument value.
			Topic string
			// Obj is the obj argument value.
			Obj interface{}
			// Options is the options argument value.
			Options []queue.Option
		}
	}
}

// Publish calls PublishFunc.
func (mock *PublisherMock) Publish(topic string, obj interface{}, options ...queue.Option) error {
	if mock.PublishFunc == nil {
		panic("moq: PublisherMock.PublishFunc is nil but Publisher.Publish was just called")
	}
	callInfo := struct {
		Topic   string
		Obj     interface{}
		Options []queue.Option
	}{
		Topic:   topic,
		Obj:     obj,
		Options: options,
	}
	lockPublisherMockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	lockPublisherMockPublish.Unlock()
	return mock.PublishFunc(topic, obj, options...)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//     len(mockedPublisher.PublishCalls())
func (mock *PublisherMock) PublishCalls() []struct {
	Topic   string
	Obj     interface{}
	Options []queue.Option
} {
	var calls []struct {
		Topic   string
		Obj     interface{}
		Options []queue.Option
	}
	lockPublisherMockPublish.RLock()
	calls = mock.calls.Publish
	lockPublisherMockPublish.RUnlock()
	return calls
}

var (
	lockSubscriberMockSubscribe sync.RWMutex
)

// SubscriberMock is a mock implementation of Subscriber.
//
//     func TestSomethingThatUsesSubscriber(t *testing.T) {
//
//         // make and configure a mocked Subscriber
//         mockedSubscriber := &SubscriberMock{
//             SubscribeFunc: func(topic string, channel string, h queue.Handler, options ...queue.Option) error {
// 	               panic("TODO: mock out the Subscribe method")
//             },
//         }
//
//         // TODO: use mockedSubscriber in code that requires Subscriber
//         //       and then make assertions.
//
//     }
type SubscriberMock struct {
	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(topic string, channel string, h queue.Handler, options ...queue.Option) error

	// calls tracks calls to the methods.
	calls struct {
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// Topic is the topic argument value.
			Topic string
			// Channel is the channel argument value.
			Channel string
			// H is the h argument value.
			H queue.Handler
			// Options is the options argument value.
			Options []queue.Option
		}
	}
}

// Subscribe calls SubscribeFunc.
func (mock *SubscriberMock) Subscribe(topic string, channel string, h queue.Handler, options ...queue.Option) error {
	if mock.SubscribeFunc == nil {
		panic("moq: SubscriberMock.SubscribeFunc is nil but Subscriber.Subscribe was just called")
	}
	callInfo := struct {
		Topic   string
		Channel string
		H       queue.Handler
		Options []queue.Option
	}{
		Topic:   topic,
		Channel: channel,
		H:       h,
		Options: options,
	}
	lockSubscriberMockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	lockSubscriberMockSubscribe.Unlock()
	return mock.SubscribeFunc(topic, channel, h, options...)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//     len(mockedSubscriber.SubscribeCalls())
func (mock *SubscriberMock) SubscribeCalls() []struct {
	Topic   string
	Channel string
	H       queue.Handler
	Options []queue.Option
} {
	var calls []struct {
		Topic   string
		Channel string
		H       queue.Handler
		Options []queue.Option
	}
	lockSubscriberMockSubscribe.RLock()
	calls = mock.calls.Subscribe
	lockSubscriberMockSubscribe.RUnlock()
	return calls
}
